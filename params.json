{
  "name": "Czar Maker",
  "tagline": "Nice set of interfaces for Leader Election using reactive programming",
  "body": "# Czar Maker\r\nCzar Maker is a nice set of interfaces for [Leader Election](https://www.consul.io/docs/guides/leader-election.html).\r\n\r\nThere is one [Czar Maker Consul implementation](http://advantageous.github.io/czar-maker-consul/) of this interaface that uses [Consul](https://www.consul.io/). You could use the interface to implement leader election with [zookeeper](https://zookeeper.apache.org/) or [etcd](https://github.com/coreos/etcd). Consul and etcd use the RAFT algorithm to present a reliable kv storage (Zookeeper uses a similar techique as Consul and etcd).\r\n\r\nCzar uses [Reakt](http://advantageous.github.io/reakt/), a Java reactive, [streaming](https://github.com/advantageous/reakt/wiki/Stream), with [callbacks](https://github.com/advantageous/reakt/wiki/Callback) and [promises](https://github.com/advantageous/reakt/wiki/Promise).\r\n\r\nCzar also uses [QBit microservices](http://advantageous.github.io/qbit/) as its HTTP/IO lib.\r\n\r\n##Getting Started\r\nThis library is just interfaces, to use Czar on your project you will need the [Czar Maker Consul implementation](http://advantageous.github.io/czar-maker-consul/).\r\n\r\n#### maven\r\n```xml\r\n<dependency>\r\n    <groupId>io.advantageous.czarmaker</groupId>\r\n    <artifactId>czar-maker</artifactId>\r\n    <version>0.1.0.RELEASE</version>\r\n</dependency>\r\n```\r\n\r\n#### gradle \r\n```java\r\ncompile 'io.advantageous.czarmaker:czar-maker:0.1.0.RELEASE'\r\n```\r\n\r\n\r\n#### Example usage\r\n```java\r\npublic class MyService {\r\n\r\n    private final String host;\r\n    private final int port;\r\n    private final LeaderElector leaderElector;\r\n    private AtomicBoolean amILeader = new AtomicBoolean();\r\n    private AtomicReference<Endpoint> leaderEndpoint = new AtomicReference<>();\r\n    \r\n    public void init() {\r\n            Promise<Endpoint> getLeaderPromise = Promises.<Endpoint>promise();\r\n            \r\n            /* Call elect new leader. */\r\n            getLeaderPromise.thenExpect(expected ->\r\n                    expected\r\n                            .ifEmpty(this::nominateSelf)\r\n                            .ifPresent(endpoint -> leaderEndpoint.set(endpoint)))\r\n                            .catchError(Throwable::printStackTrace);\r\n            leaderElector.getLeader(getLeaderPromise);\r\n            \r\n            /* Register for stream of leadership changes. */\r\n            registerForLeadershipNotices();\r\n      \r\n    }\r\n    \r\n    \r\n  private void registerForLeadershipNotices() {\r\n        leaderElector.leadershipChangeNotice(result ->\r\n                result\r\n                        .thenExpect(this::checkIfThisServiceIsLeader)\r\n                        .catchError(Throwable::printStackTrace)\r\n        );\r\n    }\r\n\r\n    //Handles leadership change stream. \r\n    private void checkIfThisServiceIsLeader(Expected<Endpoint> expectedEndpoint) {\r\n        expectedEndpoint.ifEmpty(() -> nominateSelf()) //If empty then nominate this service\r\n                .ifPresent(endpoint -> {\r\n                    amILeader.set(endpoint.getHost().equals(host) && endpoint.getPort()==port);\r\n                    leaderEndpoint.set(endpoint);\r\n                });\r\n    }\r\n\r\n    //Attempt to Nominate self if there is no leader\r\n    private void nominateSelf() {\r\n        final Promise<Boolean> selfElectPromise = Promises.<Boolean>promise();\r\n        selfElectPromise.then((elected) -> {\r\n            amILeader.set(elected);\r\n        }).catchError(Throwable::printStackTrace);\r\n\r\n        leaderElector.selfElect(new Endpoint(host, port), selfElectPromise);\r\n\r\n    }\r\n\r\n    public boolean isLeader() {\r\n        return amILeader.get();\r\n    }\r\n\r\n    public Endpoint getLeaderEndpoint() {\r\n        return leaderEndpoint.get();\r\n    }\r\n```\r\n\r\n## Related projects\r\n* [QBit Reactive Microservices](http://advantageous.github.io/qbit/)\r\n* [Reakt Reactive Java](http://advantageous.github.io/reakt)\r\n* [Reakt Guava Bridge](http://advantageous.github.io/reakt-guava/)\r\n* [QBit Extensions](https://github.com/advantageous/qbit-extensions)\r\n\r\n    \r\n    \r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}